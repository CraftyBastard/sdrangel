/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 6.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGUSRPMIMOReport.h
 *
 * USRP
 */

#ifndef SWGUSRPMIMOReport_H_
#define SWGUSRPMIMOReport_H_

#include <QJsonObject>



#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGUSRPMIMOReport: public SWGObject {
public:
    SWGUSRPMIMOReport();
    SWGUSRPMIMOReport(QString* json);
    virtual ~SWGUSRPMIMOReport();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGUSRPMIMOReport* fromJson(QString &jsonString) override;

    qint32 getRxSuccess();
    void setRxSuccess(qint32 rx_success);

    qint32 getRxStreamActive();
    void setRxStreamActive(qint32 rx_stream_active);

    qint32 getRxOverrunCount();
    void setRxOverrunCount(qint32 rx_overrun_count);

    qint32 getRxTimeoutCount();
    void setRxTimeoutCount(qint32 rx_timeout_count);

    qint32 getTxSuccess();
    void setTxSuccess(qint32 tx_success);

    qint32 getTxStreamActive();
    void setTxStreamActive(qint32 tx_stream_active);

    qint32 getTxUnderrunCount();
    void setTxUnderrunCount(qint32 tx_underrun_count);

    qint32 getTxDroppedPacketsCount();
    void setTxDroppedPacketsCount(qint32 tx_dropped_packets_count);


    virtual bool isSet() override;

private:
    qint32 rx_success;
    bool m_rx_success_isSet;

    qint32 rx_stream_active;
    bool m_rx_stream_active_isSet;

    qint32 rx_overrun_count;
    bool m_rx_overrun_count_isSet;

    qint32 rx_timeout_count;
    bool m_rx_timeout_count_isSet;

    qint32 tx_success;
    bool m_tx_success_isSet;

    qint32 tx_stream_active;
    bool m_tx_stream_active_isSet;

    qint32 tx_underrun_count;
    bool m_tx_underrun_count_isSet;

    qint32 tx_dropped_packets_count;
    bool m_tx_dropped_packets_count_isSet;

};

}

#endif /* SWGUSRPMIMOReport_H_ */
