/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 6.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUSRPMIMOSettings.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace SWGSDRangel {

SWGUSRPMIMOSettings::SWGUSRPMIMOSettings(QString* json) {
    init();
    this->fromJson(*json);
}

SWGUSRPMIMOSettings::SWGUSRPMIMOSettings() {
    dev_sample_rate = 0;
    m_dev_sample_rate_isSet = false;
    clock_source = nullptr;
    m_clock_source_isSet = false;
    rx_center_frequency = 0L;
    m_rx_center_frequency_isSet = false;
    dc_block = 0;
    m_dc_block_isSet = false;
    iq_correction = 0;
    m_iq_correction_isSet = false;
    log2_soft_decim = 0;
    m_log2_soft_decim_isSet = false;
    fc_pos_rx = 0;
    m_fc_pos_rx_isSet = false;
    rx_transverter_mode = 0;
    m_rx_transverter_mode_isSet = false;
    rx_transverter_delta_frequency = 0L;
    m_rx_transverter_delta_frequency_isSet = false;
    iq_order = 0;
    m_iq_order_isSet = false;
    rx0_lo_offset = 0;
    m_rx0_lo_offset_isSet = false;
    rx0_lpf_bw = 0;
    m_rx0_lpf_bw_isSet = false;
    rx0_antenna_path = nullptr;
    m_rx0_antenna_path_isSet = false;
    rx0_gain = 0;
    m_rx0_gain_isSet = false;
    rx0_gain_mode = 0;
    m_rx0_gain_mode_isSet = false;
    rx1_lo_offset = 0;
    m_rx1_lo_offset_isSet = false;
    rx1_lpf_bw = 0;
    m_rx1_lpf_bw_isSet = false;
    rx1_antenna_path = nullptr;
    m_rx1_antenna_path_isSet = false;
    rx1_gain = 0;
    m_rx1_gain_isSet = false;
    rx1_gain_mode = 0;
    m_rx1_gain_mode_isSet = false;
    tx_center_frequency = 0L;
    m_tx_center_frequency_isSet = false;
    log2_soft_interp = 0;
    m_log2_soft_interp_isSet = false;
    fc_pos_tx = 0;
    m_fc_pos_tx_isSet = false;
    tx_transverter_mode = 0;
    m_tx_transverter_mode_isSet = false;
    tx_transverter_delta_frequency = 0L;
    m_tx_transverter_delta_frequency_isSet = false;
    tx0_lo_offset = 0;
    m_tx0_lo_offset_isSet = false;
    tx0_lpf_bw = 0;
    m_tx0_lpf_bw_isSet = false;
    tx0_gain = 0;
    m_tx0_gain_isSet = false;
    tx0_antenna_path = nullptr;
    m_tx0_antenna_path_isSet = false;
    tx1_lo_offset = 0;
    m_tx1_lo_offset_isSet = false;
    tx1_lpf_bw = 0;
    m_tx1_lpf_bw_isSet = false;
    tx1_gain = 0;
    m_tx1_gain_isSet = false;
    tx1_antenna_path = nullptr;
    m_tx1_antenna_path_isSet = false;
    use_reverse_api = 0;
    m_use_reverse_api_isSet = false;
    reverse_api_address = nullptr;
    m_reverse_api_address_isSet = false;
    reverse_api_port = 0;
    m_reverse_api_port_isSet = false;
    reverse_api_device_index = 0;
    m_reverse_api_device_index_isSet = false;
}

SWGUSRPMIMOSettings::~SWGUSRPMIMOSettings() {
    this->cleanup();
}

void
SWGUSRPMIMOSettings::init() {
    dev_sample_rate = 0;
    m_dev_sample_rate_isSet = false;
    clock_source = new QString("");
    m_clock_source_isSet = false;
    rx_center_frequency = 0L;
    m_rx_center_frequency_isSet = false;
    dc_block = 0;
    m_dc_block_isSet = false;
    iq_correction = 0;
    m_iq_correction_isSet = false;
    log2_soft_decim = 0;
    m_log2_soft_decim_isSet = false;
    fc_pos_rx = 0;
    m_fc_pos_rx_isSet = false;
    rx_transverter_mode = 0;
    m_rx_transverter_mode_isSet = false;
    rx_transverter_delta_frequency = 0L;
    m_rx_transverter_delta_frequency_isSet = false;
    iq_order = 0;
    m_iq_order_isSet = false;
    rx0_lo_offset = 0;
    m_rx0_lo_offset_isSet = false;
    rx0_lpf_bw = 0;
    m_rx0_lpf_bw_isSet = false;
    rx0_antenna_path = new QString("");
    m_rx0_antenna_path_isSet = false;
    rx0_gain = 0;
    m_rx0_gain_isSet = false;
    rx0_gain_mode = 0;
    m_rx0_gain_mode_isSet = false;
    rx1_lo_offset = 0;
    m_rx1_lo_offset_isSet = false;
    rx1_lpf_bw = 0;
    m_rx1_lpf_bw_isSet = false;
    rx1_antenna_path = new QString("");
    m_rx1_antenna_path_isSet = false;
    rx1_gain = 0;
    m_rx1_gain_isSet = false;
    rx1_gain_mode = 0;
    m_rx1_gain_mode_isSet = false;
    tx_center_frequency = 0L;
    m_tx_center_frequency_isSet = false;
    log2_soft_interp = 0;
    m_log2_soft_interp_isSet = false;
    fc_pos_tx = 0;
    m_fc_pos_tx_isSet = false;
    tx_transverter_mode = 0;
    m_tx_transverter_mode_isSet = false;
    tx_transverter_delta_frequency = 0L;
    m_tx_transverter_delta_frequency_isSet = false;
    tx0_lo_offset = 0;
    m_tx0_lo_offset_isSet = false;
    tx0_lpf_bw = 0;
    m_tx0_lpf_bw_isSet = false;
    tx0_gain = 0;
    m_tx0_gain_isSet = false;
    tx0_antenna_path = new QString("");
    m_tx0_antenna_path_isSet = false;
    tx1_lo_offset = 0;
    m_tx1_lo_offset_isSet = false;
    tx1_lpf_bw = 0;
    m_tx1_lpf_bw_isSet = false;
    tx1_gain = 0;
    m_tx1_gain_isSet = false;
    tx1_antenna_path = new QString("");
    m_tx1_antenna_path_isSet = false;
    use_reverse_api = 0;
    m_use_reverse_api_isSet = false;
    reverse_api_address = new QString("");
    m_reverse_api_address_isSet = false;
    reverse_api_port = 0;
    m_reverse_api_port_isSet = false;
    reverse_api_device_index = 0;
    m_reverse_api_device_index_isSet = false;
}

void
SWGUSRPMIMOSettings::cleanup() {

    if(clock_source != nullptr) { 
        delete clock_source;
    }










    if(rx0_antenna_path != nullptr) { 
        delete rx0_antenna_path;
    }




    if(rx1_antenna_path != nullptr) { 
        delete rx1_antenna_path;
    }










    if(tx0_antenna_path != nullptr) { 
        delete tx0_antenna_path;
    }



    if(tx1_antenna_path != nullptr) { 
        delete tx1_antenna_path;
    }

    if(reverse_api_address != nullptr) { 
        delete reverse_api_address;
    }


}

SWGUSRPMIMOSettings*
SWGUSRPMIMOSettings::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUSRPMIMOSettings::fromJsonObject(QJsonObject &pJson) {
    ::SWGSDRangel::setValue(&dev_sample_rate, pJson["devSampleRate"], "qint32", "");
    
    ::SWGSDRangel::setValue(&clock_source, pJson["clockSource"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&rx_center_frequency, pJson["rxCenterFrequency"], "qint64", "");
    
    ::SWGSDRangel::setValue(&dc_block, pJson["dcBlock"], "qint32", "");
    
    ::SWGSDRangel::setValue(&iq_correction, pJson["iqCorrection"], "qint32", "");
    
    ::SWGSDRangel::setValue(&log2_soft_decim, pJson["log2SoftDecim"], "qint32", "");
    
    ::SWGSDRangel::setValue(&fc_pos_rx, pJson["fcPosRx"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx_transverter_mode, pJson["rxTransverterMode"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx_transverter_delta_frequency, pJson["rxTransverterDeltaFrequency"], "qint64", "");
    
    ::SWGSDRangel::setValue(&iq_order, pJson["iqOrder"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx0_lo_offset, pJson["rx0LOOffset"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx0_lpf_bw, pJson["rx0LpfBW"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx0_antenna_path, pJson["rx0AntennaPath"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&rx0_gain, pJson["rx0Gain"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx0_gain_mode, pJson["rx0GainMode"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx1_lo_offset, pJson["rx1LOOffset"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx1_lpf_bw, pJson["rx1LpfBW"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx1_antenna_path, pJson["rx1AntennaPath"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&rx1_gain, pJson["rx1Gain"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rx1_gain_mode, pJson["rx1GainMode"], "qint32", "");
    
    ::SWGSDRangel::setValue(&tx_center_frequency, pJson["txCenterFrequency"], "qint64", "");
    
    ::SWGSDRangel::setValue(&log2_soft_interp, pJson["log2SoftInterp"], "qint32", "");
    
    ::SWGSDRangel::setValue(&fc_pos_tx, pJson["fcPosTx"], "qint32", "");
    
    ::SWGSDRangel::setValue(&tx_transverter_mode, pJson["txTransverterMode"], "qint32", "");
    
    ::SWGSDRangel::setValue(&tx_transverter_delta_frequency, pJson["txTransverterDeltaFrequency"], "qint64", "");
    
    ::SWGSDRangel::setValue(&tx0_lo_offset, pJson["tx0LOOffset"], "qint32", "");
    
    ::SWGSDRangel::setValue(&tx0_lpf_bw, pJson["tx0LpfBW"], "qint32", "");
    
    ::SWGSDRangel::setValue(&tx0_gain, pJson["tx0Gain"], "qint32", "");
    
    ::SWGSDRangel::setValue(&tx0_antenna_path, pJson["tx0AntennaPath"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&tx1_lo_offset, pJson["tx1LOOffset"], "qint32", "");
    
    ::SWGSDRangel::setValue(&tx1_lpf_bw, pJson["tx1LpfBW"], "qint32", "");
    
    ::SWGSDRangel::setValue(&tx1_gain, pJson["tx1Gain"], "qint32", "");
    
    ::SWGSDRangel::setValue(&tx1_antenna_path, pJson["tx1AntennaPath"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&use_reverse_api, pJson["useReverseAPI"], "qint32", "");
    
    ::SWGSDRangel::setValue(&reverse_api_address, pJson["reverseAPIAddress"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&reverse_api_port, pJson["reverseAPIPort"], "qint32", "");
    
    ::SWGSDRangel::setValue(&reverse_api_device_index, pJson["reverseAPIDeviceIndex"], "qint32", "");
    
}

QString
SWGUSRPMIMOSettings::asJson ()
{
    QJsonObject* obj = this->asJsonObject();

    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    delete obj;
    return QString(bytes);
}

QJsonObject*
SWGUSRPMIMOSettings::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    if(m_dev_sample_rate_isSet){
        obj->insert("devSampleRate", QJsonValue(dev_sample_rate));
    }
    if(clock_source != nullptr && *clock_source != QString("")){
        toJsonValue(QString("clockSource"), clock_source, obj, QString("QString"));
    }
    if(m_rx_center_frequency_isSet){
        obj->insert("rxCenterFrequency", QJsonValue(rx_center_frequency));
    }
    if(m_dc_block_isSet){
        obj->insert("dcBlock", QJsonValue(dc_block));
    }
    if(m_iq_correction_isSet){
        obj->insert("iqCorrection", QJsonValue(iq_correction));
    }
    if(m_log2_soft_decim_isSet){
        obj->insert("log2SoftDecim", QJsonValue(log2_soft_decim));
    }
    if(m_fc_pos_rx_isSet){
        obj->insert("fcPosRx", QJsonValue(fc_pos_rx));
    }
    if(m_rx_transverter_mode_isSet){
        obj->insert("rxTransverterMode", QJsonValue(rx_transverter_mode));
    }
    if(m_rx_transverter_delta_frequency_isSet){
        obj->insert("rxTransverterDeltaFrequency", QJsonValue(rx_transverter_delta_frequency));
    }
    if(m_iq_order_isSet){
        obj->insert("iqOrder", QJsonValue(iq_order));
    }
    if(m_rx0_lo_offset_isSet){
        obj->insert("rx0LOOffset", QJsonValue(rx0_lo_offset));
    }
    if(m_rx0_lpf_bw_isSet){
        obj->insert("rx0LpfBW", QJsonValue(rx0_lpf_bw));
    }
    if(rx0_antenna_path != nullptr && *rx0_antenna_path != QString("")){
        toJsonValue(QString("rx0AntennaPath"), rx0_antenna_path, obj, QString("QString"));
    }
    if(m_rx0_gain_isSet){
        obj->insert("rx0Gain", QJsonValue(rx0_gain));
    }
    if(m_rx0_gain_mode_isSet){
        obj->insert("rx0GainMode", QJsonValue(rx0_gain_mode));
    }
    if(m_rx1_lo_offset_isSet){
        obj->insert("rx1LOOffset", QJsonValue(rx1_lo_offset));
    }
    if(m_rx1_lpf_bw_isSet){
        obj->insert("rx1LpfBW", QJsonValue(rx1_lpf_bw));
    }
    if(rx1_antenna_path != nullptr && *rx1_antenna_path != QString("")){
        toJsonValue(QString("rx1AntennaPath"), rx1_antenna_path, obj, QString("QString"));
    }
    if(m_rx1_gain_isSet){
        obj->insert("rx1Gain", QJsonValue(rx1_gain));
    }
    if(m_rx1_gain_mode_isSet){
        obj->insert("rx1GainMode", QJsonValue(rx1_gain_mode));
    }
    if(m_tx_center_frequency_isSet){
        obj->insert("txCenterFrequency", QJsonValue(tx_center_frequency));
    }
    if(m_log2_soft_interp_isSet){
        obj->insert("log2SoftInterp", QJsonValue(log2_soft_interp));
    }
    if(m_fc_pos_tx_isSet){
        obj->insert("fcPosTx", QJsonValue(fc_pos_tx));
    }
    if(m_tx_transverter_mode_isSet){
        obj->insert("txTransverterMode", QJsonValue(tx_transverter_mode));
    }
    if(m_tx_transverter_delta_frequency_isSet){
        obj->insert("txTransverterDeltaFrequency", QJsonValue(tx_transverter_delta_frequency));
    }
    if(m_tx0_lo_offset_isSet){
        obj->insert("tx0LOOffset", QJsonValue(tx0_lo_offset));
    }
    if(m_tx0_lpf_bw_isSet){
        obj->insert("tx0LpfBW", QJsonValue(tx0_lpf_bw));
    }
    if(m_tx0_gain_isSet){
        obj->insert("tx0Gain", QJsonValue(tx0_gain));
    }
    if(tx0_antenna_path != nullptr && *tx0_antenna_path != QString("")){
        toJsonValue(QString("tx0AntennaPath"), tx0_antenna_path, obj, QString("QString"));
    }
    if(m_tx1_lo_offset_isSet){
        obj->insert("tx1LOOffset", QJsonValue(tx1_lo_offset));
    }
    if(m_tx1_lpf_bw_isSet){
        obj->insert("tx1LpfBW", QJsonValue(tx1_lpf_bw));
    }
    if(m_tx1_gain_isSet){
        obj->insert("tx1Gain", QJsonValue(tx1_gain));
    }
    if(tx1_antenna_path != nullptr && *tx1_antenna_path != QString("")){
        toJsonValue(QString("tx1AntennaPath"), tx1_antenna_path, obj, QString("QString"));
    }
    if(m_use_reverse_api_isSet){
        obj->insert("useReverseAPI", QJsonValue(use_reverse_api));
    }
    if(reverse_api_address != nullptr && *reverse_api_address != QString("")){
        toJsonValue(QString("reverseAPIAddress"), reverse_api_address, obj, QString("QString"));
    }
    if(m_reverse_api_port_isSet){
        obj->insert("reverseAPIPort", QJsonValue(reverse_api_port));
    }
    if(m_reverse_api_device_index_isSet){
        obj->insert("reverseAPIDeviceIndex", QJsonValue(reverse_api_device_index));
    }

    return obj;
}

qint32
SWGUSRPMIMOSettings::getDevSampleRate() {
    return dev_sample_rate;
}
void
SWGUSRPMIMOSettings::setDevSampleRate(qint32 dev_sample_rate) {
    this->dev_sample_rate = dev_sample_rate;
    this->m_dev_sample_rate_isSet = true;
}

QString*
SWGUSRPMIMOSettings::getClockSource() {
    return clock_source;
}
void
SWGUSRPMIMOSettings::setClockSource(QString* clock_source) {
    this->clock_source = clock_source;
    this->m_clock_source_isSet = true;
}

qint64
SWGUSRPMIMOSettings::getRxCenterFrequency() {
    return rx_center_frequency;
}
void
SWGUSRPMIMOSettings::setRxCenterFrequency(qint64 rx_center_frequency) {
    this->rx_center_frequency = rx_center_frequency;
    this->m_rx_center_frequency_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getDcBlock() {
    return dc_block;
}
void
SWGUSRPMIMOSettings::setDcBlock(qint32 dc_block) {
    this->dc_block = dc_block;
    this->m_dc_block_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getIqCorrection() {
    return iq_correction;
}
void
SWGUSRPMIMOSettings::setIqCorrection(qint32 iq_correction) {
    this->iq_correction = iq_correction;
    this->m_iq_correction_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getLog2SoftDecim() {
    return log2_soft_decim;
}
void
SWGUSRPMIMOSettings::setLog2SoftDecim(qint32 log2_soft_decim) {
    this->log2_soft_decim = log2_soft_decim;
    this->m_log2_soft_decim_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getFcPosRx() {
    return fc_pos_rx;
}
void
SWGUSRPMIMOSettings::setFcPosRx(qint32 fc_pos_rx) {
    this->fc_pos_rx = fc_pos_rx;
    this->m_fc_pos_rx_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getRxTransverterMode() {
    return rx_transverter_mode;
}
void
SWGUSRPMIMOSettings::setRxTransverterMode(qint32 rx_transverter_mode) {
    this->rx_transverter_mode = rx_transverter_mode;
    this->m_rx_transverter_mode_isSet = true;
}

qint64
SWGUSRPMIMOSettings::getRxTransverterDeltaFrequency() {
    return rx_transverter_delta_frequency;
}
void
SWGUSRPMIMOSettings::setRxTransverterDeltaFrequency(qint64 rx_transverter_delta_frequency) {
    this->rx_transverter_delta_frequency = rx_transverter_delta_frequency;
    this->m_rx_transverter_delta_frequency_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getIqOrder() {
    return iq_order;
}
void
SWGUSRPMIMOSettings::setIqOrder(qint32 iq_order) {
    this->iq_order = iq_order;
    this->m_iq_order_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getRx0LoOffset() {
    return rx0_lo_offset;
}
void
SWGUSRPMIMOSettings::setRx0LoOffset(qint32 rx0_lo_offset) {
    this->rx0_lo_offset = rx0_lo_offset;
    this->m_rx0_lo_offset_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getRx0LpfBw() {
    return rx0_lpf_bw;
}
void
SWGUSRPMIMOSettings::setRx0LpfBw(qint32 rx0_lpf_bw) {
    this->rx0_lpf_bw = rx0_lpf_bw;
    this->m_rx0_lpf_bw_isSet = true;
}

QString*
SWGUSRPMIMOSettings::getRx0AntennaPath() {
    return rx0_antenna_path;
}
void
SWGUSRPMIMOSettings::setRx0AntennaPath(QString* rx0_antenna_path) {
    this->rx0_antenna_path = rx0_antenna_path;
    this->m_rx0_antenna_path_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getRx0Gain() {
    return rx0_gain;
}
void
SWGUSRPMIMOSettings::setRx0Gain(qint32 rx0_gain) {
    this->rx0_gain = rx0_gain;
    this->m_rx0_gain_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getRx0GainMode() {
    return rx0_gain_mode;
}
void
SWGUSRPMIMOSettings::setRx0GainMode(qint32 rx0_gain_mode) {
    this->rx0_gain_mode = rx0_gain_mode;
    this->m_rx0_gain_mode_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getRx1LoOffset() {
    return rx1_lo_offset;
}
void
SWGUSRPMIMOSettings::setRx1LoOffset(qint32 rx1_lo_offset) {
    this->rx1_lo_offset = rx1_lo_offset;
    this->m_rx1_lo_offset_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getRx1LpfBw() {
    return rx1_lpf_bw;
}
void
SWGUSRPMIMOSettings::setRx1LpfBw(qint32 rx1_lpf_bw) {
    this->rx1_lpf_bw = rx1_lpf_bw;
    this->m_rx1_lpf_bw_isSet = true;
}

QString*
SWGUSRPMIMOSettings::getRx1AntennaPath() {
    return rx1_antenna_path;
}
void
SWGUSRPMIMOSettings::setRx1AntennaPath(QString* rx1_antenna_path) {
    this->rx1_antenna_path = rx1_antenna_path;
    this->m_rx1_antenna_path_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getRx1Gain() {
    return rx1_gain;
}
void
SWGUSRPMIMOSettings::setRx1Gain(qint32 rx1_gain) {
    this->rx1_gain = rx1_gain;
    this->m_rx1_gain_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getRx1GainMode() {
    return rx1_gain_mode;
}
void
SWGUSRPMIMOSettings::setRx1GainMode(qint32 rx1_gain_mode) {
    this->rx1_gain_mode = rx1_gain_mode;
    this->m_rx1_gain_mode_isSet = true;
}

qint64
SWGUSRPMIMOSettings::getTxCenterFrequency() {
    return tx_center_frequency;
}
void
SWGUSRPMIMOSettings::setTxCenterFrequency(qint64 tx_center_frequency) {
    this->tx_center_frequency = tx_center_frequency;
    this->m_tx_center_frequency_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getLog2SoftInterp() {
    return log2_soft_interp;
}
void
SWGUSRPMIMOSettings::setLog2SoftInterp(qint32 log2_soft_interp) {
    this->log2_soft_interp = log2_soft_interp;
    this->m_log2_soft_interp_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getFcPosTx() {
    return fc_pos_tx;
}
void
SWGUSRPMIMOSettings::setFcPosTx(qint32 fc_pos_tx) {
    this->fc_pos_tx = fc_pos_tx;
    this->m_fc_pos_tx_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getTxTransverterMode() {
    return tx_transverter_mode;
}
void
SWGUSRPMIMOSettings::setTxTransverterMode(qint32 tx_transverter_mode) {
    this->tx_transverter_mode = tx_transverter_mode;
    this->m_tx_transverter_mode_isSet = true;
}

qint64
SWGUSRPMIMOSettings::getTxTransverterDeltaFrequency() {
    return tx_transverter_delta_frequency;
}
void
SWGUSRPMIMOSettings::setTxTransverterDeltaFrequency(qint64 tx_transverter_delta_frequency) {
    this->tx_transverter_delta_frequency = tx_transverter_delta_frequency;
    this->m_tx_transverter_delta_frequency_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getTx0LoOffset() {
    return tx0_lo_offset;
}
void
SWGUSRPMIMOSettings::setTx0LoOffset(qint32 tx0_lo_offset) {
    this->tx0_lo_offset = tx0_lo_offset;
    this->m_tx0_lo_offset_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getTx0LpfBw() {
    return tx0_lpf_bw;
}
void
SWGUSRPMIMOSettings::setTx0LpfBw(qint32 tx0_lpf_bw) {
    this->tx0_lpf_bw = tx0_lpf_bw;
    this->m_tx0_lpf_bw_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getTx0Gain() {
    return tx0_gain;
}
void
SWGUSRPMIMOSettings::setTx0Gain(qint32 tx0_gain) {
    this->tx0_gain = tx0_gain;
    this->m_tx0_gain_isSet = true;
}

QString*
SWGUSRPMIMOSettings::getTx0AntennaPath() {
    return tx0_antenna_path;
}
void
SWGUSRPMIMOSettings::setTx0AntennaPath(QString* tx0_antenna_path) {
    this->tx0_antenna_path = tx0_antenna_path;
    this->m_tx0_antenna_path_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getTx1LoOffset() {
    return tx1_lo_offset;
}
void
SWGUSRPMIMOSettings::setTx1LoOffset(qint32 tx1_lo_offset) {
    this->tx1_lo_offset = tx1_lo_offset;
    this->m_tx1_lo_offset_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getTx1LpfBw() {
    return tx1_lpf_bw;
}
void
SWGUSRPMIMOSettings::setTx1LpfBw(qint32 tx1_lpf_bw) {
    this->tx1_lpf_bw = tx1_lpf_bw;
    this->m_tx1_lpf_bw_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getTx1Gain() {
    return tx1_gain;
}
void
SWGUSRPMIMOSettings::setTx1Gain(qint32 tx1_gain) {
    this->tx1_gain = tx1_gain;
    this->m_tx1_gain_isSet = true;
}

QString*
SWGUSRPMIMOSettings::getTx1AntennaPath() {
    return tx1_antenna_path;
}
void
SWGUSRPMIMOSettings::setTx1AntennaPath(QString* tx1_antenna_path) {
    this->tx1_antenna_path = tx1_antenna_path;
    this->m_tx1_antenna_path_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getUseReverseApi() {
    return use_reverse_api;
}
void
SWGUSRPMIMOSettings::setUseReverseApi(qint32 use_reverse_api) {
    this->use_reverse_api = use_reverse_api;
    this->m_use_reverse_api_isSet = true;
}

QString*
SWGUSRPMIMOSettings::getReverseApiAddress() {
    return reverse_api_address;
}
void
SWGUSRPMIMOSettings::setReverseApiAddress(QString* reverse_api_address) {
    this->reverse_api_address = reverse_api_address;
    this->m_reverse_api_address_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getReverseApiPort() {
    return reverse_api_port;
}
void
SWGUSRPMIMOSettings::setReverseApiPort(qint32 reverse_api_port) {
    this->reverse_api_port = reverse_api_port;
    this->m_reverse_api_port_isSet = true;
}

qint32
SWGUSRPMIMOSettings::getReverseApiDeviceIndex() {
    return reverse_api_device_index;
}
void
SWGUSRPMIMOSettings::setReverseApiDeviceIndex(qint32 reverse_api_device_index) {
    this->reverse_api_device_index = reverse_api_device_index;
    this->m_reverse_api_device_index_isSet = true;
}


bool
SWGUSRPMIMOSettings::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_dev_sample_rate_isSet){
            isObjectUpdated = true; break;
        }
        if(clock_source && *clock_source != QString("")){
            isObjectUpdated = true; break;
        }
        if(m_rx_center_frequency_isSet){
            isObjectUpdated = true; break;
        }
        if(m_dc_block_isSet){
            isObjectUpdated = true; break;
        }
        if(m_iq_correction_isSet){
            isObjectUpdated = true; break;
        }
        if(m_log2_soft_decim_isSet){
            isObjectUpdated = true; break;
        }
        if(m_fc_pos_rx_isSet){
            isObjectUpdated = true; break;
        }
        if(m_rx_transverter_mode_isSet){
            isObjectUpdated = true; break;
        }
        if(m_rx_transverter_delta_frequency_isSet){
            isObjectUpdated = true; break;
        }
        if(m_iq_order_isSet){
            isObjectUpdated = true; break;
        }
        if(m_rx0_lo_offset_isSet){
            isObjectUpdated = true; break;
        }
        if(m_rx0_lpf_bw_isSet){
            isObjectUpdated = true; break;
        }
        if(rx0_antenna_path && *rx0_antenna_path != QString("")){
            isObjectUpdated = true; break;
        }
        if(m_rx0_gain_isSet){
            isObjectUpdated = true; break;
        }
        if(m_rx0_gain_mode_isSet){
            isObjectUpdated = true; break;
        }
        if(m_rx1_lo_offset_isSet){
            isObjectUpdated = true; break;
        }
        if(m_rx1_lpf_bw_isSet){
            isObjectUpdated = true; break;
        }
        if(rx1_antenna_path && *rx1_antenna_path != QString("")){
            isObjectUpdated = true; break;
        }
        if(m_rx1_gain_isSet){
            isObjectUpdated = true; break;
        }
        if(m_rx1_gain_mode_isSet){
            isObjectUpdated = true; break;
        }
        if(m_tx_center_frequency_isSet){
            isObjectUpdated = true; break;
        }
        if(m_log2_soft_interp_isSet){
            isObjectUpdated = true; break;
        }
        if(m_fc_pos_tx_isSet){
            isObjectUpdated = true; break;
        }
        if(m_tx_transverter_mode_isSet){
            isObjectUpdated = true; break;
        }
        if(m_tx_transverter_delta_frequency_isSet){
            isObjectUpdated = true; break;
        }
        if(m_tx0_lo_offset_isSet){
            isObjectUpdated = true; break;
        }
        if(m_tx0_lpf_bw_isSet){
            isObjectUpdated = true; break;
        }
        if(m_tx0_gain_isSet){
            isObjectUpdated = true; break;
        }
        if(tx0_antenna_path && *tx0_antenna_path != QString("")){
            isObjectUpdated = true; break;
        }
        if(m_tx1_lo_offset_isSet){
            isObjectUpdated = true; break;
        }
        if(m_tx1_lpf_bw_isSet){
            isObjectUpdated = true; break;
        }
        if(m_tx1_gain_isSet){
            isObjectUpdated = true; break;
        }
        if(tx1_antenna_path && *tx1_antenna_path != QString("")){
            isObjectUpdated = true; break;
        }
        if(m_use_reverse_api_isSet){
            isObjectUpdated = true; break;
        }
        if(reverse_api_address && *reverse_api_address != QString("")){
            isObjectUpdated = true; break;
        }
        if(m_reverse_api_port_isSet){
            isObjectUpdated = true; break;
        }
        if(m_reverse_api_device_index_isSet){
            isObjectUpdated = true; break;
        }
    }while(false);
    return isObjectUpdated;
}
}

